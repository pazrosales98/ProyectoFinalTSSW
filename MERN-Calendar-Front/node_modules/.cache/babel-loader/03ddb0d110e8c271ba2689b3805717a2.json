{"ast":null,"code":"import Swal from 'sweetalert2';\nimport { types } from '../types/types';\nimport { fetchConToken } from '../helpers/fetch';\nimport { prepareEvents } from '../helpers/prepareEvents';\nexport const eventStartAddNew = event => {\n  return async (dispatch, getState) => {\n    const {\n      uid,\n      name\n    } = getState().auth;\n\n    try {\n      const resp = await fetchConToken('events', event, 'POST');\n      const body = await resp.json();\n      console.log(body);\n\n      if (body.ok) {\n        event.id = body.evento.id;\n        event.user = {\n          _id: uid,\n          name: name\n        };\n        console.log(event);\n        dispatch(eventAddNew(event));\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventAddNew = event => ({\n  type: types.eventAddNew,\n  payload: event\n});\n\nexport const eventSetActive = event => ({\n  type: types.eventSetActive,\n  payload: event\n});\nexport const eventClearActiveEvent = () => ({\n  type: types.eventClearActiveEvent\n});\nexport const eventStartUpdate = event => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken(`events/${event.id}`, event, 'PUT');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventUpdated(event));\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventUpdated = event => ({\n  type: types.eventUpdated,\n  payload: event\n});\n\nexport const eventStartDelete = () => {\n  return async (dispatch, getState) => {\n    const {\n      id\n    } = getState().calendar.activeEvent;\n\n    try {\n      const resp = await fetchConToken(`events/${id}`, {}, 'DELETE');\n      const body = await resp.json();\n\n      if (body.ok) {\n        dispatch(eventDeleted());\n      } else {\n        Swal.fire('Error', body.msg, 'error');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventDeleted = () => ({\n  type: types.eventDeleted\n});\n\nexport const eventStartLoading = () => {\n  return async dispatch => {\n    try {\n      const resp = await fetchConToken('events');\n      const body = await resp.json();\n      const events = prepareEvents(body.eventos);\n      dispatch(eventLoaded(events));\n    } catch (error) {\n      console.log(error);\n    }\n  };\n};\n\nconst eventLoaded = events => ({\n  type: types.eventLoaded,\n  payload: events\n});\n\nexport const eventLogout = () => ({\n  type: types.eventLogout\n});","map":{"version":3,"sources":["C:/Users/Diana/Downloads/ProyectSeminario/MERN-Calendar-Front/src/actions/events.js"],"names":["Swal","types","fetchConToken","prepareEvents","eventStartAddNew","event","dispatch","getState","uid","name","auth","resp","body","json","console","log","ok","id","evento","user","_id","eventAddNew","error","type","payload","eventSetActive","eventClearActiveEvent","eventStartUpdate","eventUpdated","fire","msg","eventStartDelete","calendar","activeEvent","eventDeleted","eventStartLoading","events","eventos","eventLoaded","eventLogout"],"mappings":"AAAA,OAAOA,IAAP,MAAiB,aAAjB;AAEA,SAASC,KAAT,QAAsB,gBAAtB;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,SAASC,aAAT,QAA8B,0BAA9B;AAGA,OAAO,MAAMC,gBAAgB,GAAKC,KAAF,IAAa;AACzC,SAAO,OAAOC,QAAP,EAAiBC,QAAjB,KAA+B;AAElC,UAAM;AAAEC,MAAAA,GAAF;AAAOC,MAAAA;AAAP,QAAgBF,QAAQ,GAAGG,IAAjC;;AAEA,QAAI;AACA,YAAMC,IAAI,GAAG,MAAMT,aAAa,CAAC,QAAD,EAAWG,KAAX,EAAkB,MAAlB,CAAhC;AACA,YAAMO,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;AAEAC,MAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;;AAEA,UAAKA,IAAI,CAACI,EAAV,EAAe;AACXX,QAAAA,KAAK,CAACY,EAAN,GAAWL,IAAI,CAACM,MAAL,CAAYD,EAAvB;AACAZ,QAAAA,KAAK,CAACc,IAAN,GAAa;AACTC,UAAAA,GAAG,EAAEZ,GADI;AAETC,UAAAA,IAAI,EAAEA;AAFG,SAAb;AAIAK,QAAAA,OAAO,CAACC,GAAR,CAAaV,KAAb;AACAC,QAAAA,QAAQ,CAAEe,WAAW,CAAEhB,KAAF,CAAb,CAAR;AACH;AAGJ,KAjBD,CAiBE,OAAOiB,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AAIJ,GA3BD;AA4BH,CA7BM;;AAiCP,MAAMD,WAAW,GAAIhB,KAAD,KAAY;AAC5BkB,EAAAA,IAAI,EAAEtB,KAAK,CAACoB,WADgB;AAE5BG,EAAAA,OAAO,EAAEnB;AAFmB,CAAZ,CAApB;;AAKA,OAAO,MAAMoB,cAAc,GAAIpB,KAAD,KAAY;AACtCkB,EAAAA,IAAI,EAAEtB,KAAK,CAACwB,cAD0B;AAEtCD,EAAAA,OAAO,EAAEnB;AAF6B,CAAZ,CAAvB;AAKP,OAAO,MAAMqB,qBAAqB,GAAG,OAAO;AAAEH,EAAAA,IAAI,EAAEtB,KAAK,CAACyB;AAAd,CAAP,CAA9B;AAIP,OAAO,MAAMC,gBAAgB,GAAKtB,KAAF,IAAa;AACzC,SAAO,MAAMC,QAAN,IAAmB;AAEtB,QAAI;AACA,YAAMK,IAAI,GAAG,MAAMT,aAAa,CAAE,UAAUG,KAAK,CAACY,EAAI,EAAtB,EAAyBZ,KAAzB,EAAgC,KAAhC,CAAhC;AACA,YAAMO,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;;AAEA,UAAKD,IAAI,CAACI,EAAV,EAAe;AACXV,QAAAA,QAAQ,CAAEsB,YAAY,CAAEvB,KAAF,CAAd,CAAR;AACH,OAFD,MAEO;AACHL,QAAAA,IAAI,CAAC6B,IAAL,CAAU,OAAV,EAAmBjB,IAAI,CAACkB,GAAxB,EAA6B,OAA7B;AACH;AAGJ,KAXD,CAWE,OAAOR,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AAEJ,GAjBD;AAkBH,CAnBM;;AAqBP,MAAMM,YAAY,GAAKvB,KAAF,KAAc;AAC/BkB,EAAAA,IAAI,EAAEtB,KAAK,CAAC2B,YADmB;AAE/BJ,EAAAA,OAAO,EAAEnB;AAFsB,CAAd,CAArB;;AAMA,OAAO,MAAM0B,gBAAgB,GAAG,MAAM;AAClC,SAAO,OAAQzB,QAAR,EAAkBC,QAAlB,KAAgC;AAEnC,UAAM;AAAEU,MAAAA;AAAF,QAASV,QAAQ,GAAGyB,QAAX,CAAoBC,WAAnC;;AACA,QAAI;AACA,YAAMtB,IAAI,GAAG,MAAMT,aAAa,CAAE,UAAUe,EAAI,EAAhB,EAAmB,EAAnB,EAAuB,QAAvB,CAAhC;AACA,YAAML,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;;AAEA,UAAKD,IAAI,CAACI,EAAV,EAAe;AACXV,QAAAA,QAAQ,CAAE4B,YAAY,EAAd,CAAR;AACH,OAFD,MAEO;AACHlC,QAAAA,IAAI,CAAC6B,IAAL,CAAU,OAAV,EAAmBjB,IAAI,CAACkB,GAAxB,EAA6B,OAA7B;AACH;AAGJ,KAXD,CAWE,OAAOR,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AAEJ,GAlBD;AAmBH,CApBM;;AAuBP,MAAMY,YAAY,GAAG,OAAO;AAAEX,EAAAA,IAAI,EAAEtB,KAAK,CAACiC;AAAd,CAAP,CAArB;;AAGA,OAAO,MAAMC,iBAAiB,GAAG,MAAM;AACnC,SAAO,MAAM7B,QAAN,IAAmB;AAEtB,QAAI;AAEA,YAAMK,IAAI,GAAG,MAAMT,aAAa,CAAE,QAAF,CAAhC;AACA,YAAMU,IAAI,GAAG,MAAMD,IAAI,CAACE,IAAL,EAAnB;AAEA,YAAMuB,MAAM,GAAGjC,aAAa,CAAES,IAAI,CAACyB,OAAP,CAA5B;AACA/B,MAAAA,QAAQ,CAAEgC,WAAW,CAAEF,MAAF,CAAb,CAAR;AAEH,KARD,CAQE,OAAOd,KAAP,EAAc;AACZR,MAAAA,OAAO,CAACC,GAAR,CAAYO,KAAZ;AACH;AAEJ,GAdD;AAeH,CAhBM;;AAkBP,MAAMgB,WAAW,GAAIF,MAAD,KAAa;AAC7Bb,EAAAA,IAAI,EAAEtB,KAAK,CAACqC,WADiB;AAE7Bd,EAAAA,OAAO,EAAEY;AAFoB,CAAb,CAApB;;AAKA,OAAO,MAAMG,WAAW,GAAE,OAAO;AAAEhB,EAAAA,IAAI,EAAEtB,KAAK,CAACsC;AAAd,CAAP,CAAnB","sourcesContent":["import Swal from 'sweetalert2';\r\n\r\nimport { types } from '../types/types';\r\nimport { fetchConToken } from '../helpers/fetch';\r\nimport { prepareEvents } from '../helpers/prepareEvents';\r\n\r\n\r\nexport const eventStartAddNew = ( event ) => {\r\n    return async( dispatch, getState ) => {\r\n\r\n        const { uid, name } = getState().auth;\r\n\r\n        try {\r\n            const resp = await fetchConToken('events', event, 'POST');\r\n            const body = await resp.json();\r\n\r\n            console.log(body)\r\n\r\n            if ( body.ok ) {\r\n                event.id = body.evento.id;\r\n                event.user = {\r\n                    _id: uid,\r\n                    name: name\r\n                }\r\n                console.log( event );\r\n                dispatch( eventAddNew( event ) );\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n\r\n        \r\n\r\n    }\r\n}\r\n\r\n\r\n\r\nconst eventAddNew = (event) => ({\r\n    type: types.eventAddNew,\r\n    payload: event\r\n});\r\n\r\nexport const eventSetActive = (event) => ({\r\n    type: types.eventSetActive,\r\n    payload: event\r\n});\r\n\r\nexport const eventClearActiveEvent = () => ({ type: types.eventClearActiveEvent });\r\n\r\n\r\n\r\nexport const eventStartUpdate = ( event ) => {\r\n    return async(dispatch) => {\r\n\r\n        try {\r\n            const resp = await fetchConToken(`events/${ event.id }`, event, 'PUT' );\r\n            const body = await resp.json();\r\n\r\n            if ( body.ok ) {\r\n                dispatch( eventUpdated( event ) );\r\n            } else {\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst eventUpdated = ( event ) => ({\r\n    type: types.eventUpdated,\r\n    payload: event\r\n});\r\n\r\n\r\nexport const eventStartDelete = () => {\r\n    return async ( dispatch, getState ) => {\r\n\r\n        const { id } = getState().calendar.activeEvent;\r\n        try {\r\n            const resp = await fetchConToken(`events/${ id }`, {}, 'DELETE' );\r\n            const body = await resp.json();\r\n\r\n            if ( body.ok ) {\r\n                dispatch( eventDeleted() );\r\n            } else {\r\n                Swal.fire('Error', body.msg, 'error');\r\n            }\r\n\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\n\r\nconst eventDeleted = () => ({ type: types.eventDeleted });\r\n\r\n\r\nexport const eventStartLoading = () => {\r\n    return async(dispatch) => {\r\n\r\n        try {\r\n            \r\n            const resp = await fetchConToken( 'events' );\r\n            const body = await resp.json();\r\n\r\n            const events = prepareEvents( body.eventos );\r\n            dispatch( eventLoaded( events ) );\r\n\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n\r\n    }\r\n}\r\n\r\nconst eventLoaded = (events) => ({\r\n    type: types.eventLoaded,\r\n    payload: events\r\n})\r\n\r\nexport const eventLogout =() => ({ type: types.eventLogout });"]},"metadata":{},"sourceType":"module"}