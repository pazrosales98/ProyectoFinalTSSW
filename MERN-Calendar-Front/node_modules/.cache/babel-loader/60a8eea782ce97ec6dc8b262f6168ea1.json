{"ast":null,"code":"import { fetchSinToken, fetchConToken } from '../helpers/fetch';\nimport { types } from '../types/types';\nimport Swal from 'sweetalert2';\nimport { eventLogout } from './events';\nexport const startLogin = (email, password) => {\n  return async dispatch => {\n    const resp = await fetchSinToken('auth', {\n      email,\n      password\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\nexport const startRegister = (email, password, name) => {\n  return async dispatch => {\n    const resp = await fetchSinToken('auth/new', {\n      email,\n      password,\n      name\n    }, 'POST');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      Swal.fire('Error', body.msg, 'error');\n    }\n  };\n};\nexport const startChecking = () => {\n  return async dispatch => {\n    const resp = await fetchConToken('auth/renew');\n    const body = await resp.json();\n\n    if (body.ok) {\n      localStorage.setItem('token', body.token);\n      localStorage.setItem('token-init-date', new Date().getTime());\n      dispatch(login({\n        uid: body.uid,\n        name: body.name\n      }));\n    } else {\n      dispatch(checkingFinish());\n    }\n  };\n};\n\nconst checkingFinish = () => ({\n  type: types.authCheckingFinish\n});\n\nconst login = user => ({\n  type: types.authLogin,\n  payload: user\n});\n\nexport const startLogout = () => {\n  return dispatch => {\n    localStorage.clear();\n    dispatch(eventLogout());\n    dispatch(logout());\n  };\n};\n\nconst logout = () => ({\n  type: types.authLogout\n});","map":{"version":3,"sources":["C:/Users/Diana/Downloads/ProyectSeminario/MERN-Calendar-Front/src/actions/auth.js"],"names":["fetchSinToken","fetchConToken","types","Swal","eventLogout","startLogin","email","password","dispatch","resp","body","json","ok","localStorage","setItem","token","Date","getTime","login","uid","name","fire","msg","startRegister","startChecking","checkingFinish","type","authCheckingFinish","user","authLogin","payload","startLogout","clear","logout","authLogout"],"mappings":"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","sourcesContent":["import { fetchSinToken, fetchConToken } from '../helpers/fetch';\r\nimport { types } from '../types/types';\r\nimport Swal from 'sweetalert2';\r\nimport { eventLogout } from './events';\r\n\r\nexport const startLogin = ( email, password ) => {\r\n    return async( dispatch ) => {\r\n\r\n        const resp = await fetchSinToken( 'auth', { email, password }, 'POST' );\r\n        const body = await resp.json();\r\n\r\n        if( body.ok ) {\r\n            localStorage.setItem('token', body.token );\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) )\r\n        } else {\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n        \r\n\r\n    }\r\n}\r\n\r\nexport const startRegister = ( email, password, name ) => {\r\n    return async( dispatch ) => {\r\n\r\n        const resp = await fetchSinToken( 'auth/new', { email, password, name }, 'POST' );\r\n        const body = await resp.json();\r\n\r\n        if( body.ok ) {\r\n            localStorage.setItem('token', body.token );\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) )\r\n        } else {\r\n            Swal.fire('Error', body.msg, 'error');\r\n        }\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const startChecking = () => {\r\n    return async(dispatch) => {\r\n\r\n        const resp = await fetchConToken( 'auth/renew' );\r\n        const body = await resp.json();\r\n\r\n\r\n        if( body.ok ) {\r\n            localStorage.setItem('token', body.token );\r\n            localStorage.setItem('token-init-date', new Date().getTime() );\r\n\r\n            dispatch( login({\r\n                uid: body.uid,\r\n                name: body.name\r\n            }) )\r\n        } else {\r\n            dispatch( checkingFinish() );\r\n        }\r\n    }\r\n}\r\n\r\nconst checkingFinish = () => ({ type: types.authCheckingFinish });\r\n\r\n\r\n\r\nconst login = ( user ) => ({\r\n    type: types.authLogin,\r\n    payload: user\r\n});\r\n\r\n\r\nexport const startLogout = () => {\r\n    return ( dispatch ) => {\r\n\r\n        localStorage.clear();\r\n        dispatch( eventLogout() );\r\n        dispatch( logout() );\r\n    }\r\n}\r\n\r\nconst logout = () => ({ type: types.authLogout })"]},"metadata":{},"sourceType":"module"}